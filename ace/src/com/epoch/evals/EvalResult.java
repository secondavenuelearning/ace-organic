package com.epoch.evals;

import com.epoch.chem.MolString;
import com.epoch.constants.FormatConstants;
import com.epoch.evals.evalConstants.EvalResultConstants;
import com.epoch.session.sessConstants.GradeConstants;
import java.util.Date;

/**	Holds a response, and usually the result of its evaluation.
	Also holds information about the instantiation of a student's view of a
	question:
	<ul>
 		<li>In multiple-choice, fillblank, and rank questions, lastResponse contains 
			the order of the options presented to the student.
	</ul>		
	Even when a student has not yet responded, lastResponse may be 
		populated with the instantiation information.  In the database table 
		corresponding to the EvalResult class, this information is 
		recorded as the 0th response.  
*/

public class EvalResult 
		implements FormatConstants, EvalResultConstants, GradeConstants {

	/** Unique ID of the question to which this response belongs.  */
	public int qId; 
	/** A student's last response, or a student's initial view of a 
	 * multiple-choice or ranking question. */
	transient public String lastResponse;
	/** How many times the student has responded to this question.  May be 0. */
	public int tries;
	/** If this response is the last response to this question by this student. */
	public boolean mostRecent;
	/** The grade associated with this response. */
	public double grade = 0;
	/** The grade associated with this response, modified by assignment 
	 * question-, attempt-, and time-dependent grading parameters; calculated by
	 * Oracle when this EvalResult is inserted into the database. */
	public double modGrade = 0;
	/** The feedback generated by the evaluation of this response. */
	public String feedback = null; 
	/** The student's response modified to highlight a characteristic, usually
	 * by coloring. */
	public String modifiedResponse; 
	/** When the response was stored in the database. */
	public Date timeOfResponse;
	/** The IP address from which the response was submitted. */
	public String ipAddr;
	/** The nature of the information stored in this EvalResult: an
	 * initialized view of the question, a response saved but not submitted for
	 * evaluation, a response that requires human evaluation, or an evaluated 
	 * response. */
	public char status = NO_STATUS;
	/** Comment by the instructor on the student's response. */
	public String comment = ""; 

	/** Constructor.  Intentionally empty. */
	public EvalResult() { 
		// empty constructor
	}

	/** Gets a Javascript expression that will generate this respure's image
	 * in a Web page.
	 * @param	pathToRoot	path to application root
	 * @param	prefersPNG	prefers PNG over SVG graphics
	 * @param	qFlags	flags of the question
	 * @return	HTML with the Java expression
	 */
	public String getImage(String pathToRoot, boolean prefersPNG, long qFlags) {
		return getImage(pathToRoot, prefersPNG, qFlags, "1");
	} // getImage(String, boolean, long)

	/** Gets a Javascript expression that will generate this respure's image
	 * in a Web page.
	 * @param	pathToRoot	path to application root
	 * @param	prefersPNG	prefers PNG over SVG graphics
	 * @param	qFlags	flags of the question
	 * @param	respNum	serial number of the last response
	 * @return	HTML with the Java expression
	 */
	public String getImage(String pathToRoot, boolean prefersPNG, long qFlags,
			int respNum) {
		return getImage(pathToRoot, prefersPNG, qFlags, String.valueOf(respNum));
	} // getImage(String, boolean, long, int)

	/** Gets a Javascript expression that will generate this respure's image
	 * in a Web page.
	 * @param	pathToRoot	path to application root
	 * @param	prefersPNG	prefers PNG over SVG graphics
	 * @param	respIdStr	unique identifier of the response on the Web page
	 * @param	qFlags	flags of the question
	 * @return	HTML with the Java expression
	 */
	public String getImage(String pathToRoot, boolean prefersPNG, long qFlags,
			String respIdStr) {
		return MolString.getImage(pathToRoot, lastResponse, qFlags, respIdStr, 
				prefersPNG);
	} // getImage(String, boolean, long, String)

} // EvalResult
